#!/bin/bash
# CMK setup
# V0.1
# Made to work with Virtual Machines or LXD Containers
# Move the above to config aux file
scriptname="1madafucka"
snorlax=7
#user_cmk="cmk_installer"
#secret="NUCNDXM@UBOOVCWMLSKF"
#cmk_agent_1_5_19="http://172.25.150.49/magccme01/check_mk/agents/special/check-mk-agent-1.5.0p19-1.noarch.rpm"
#Should also gather all path and expose them in an informative function like help usage
#
function initsetup {
  clear
  echo "***********************************************"
  echo "Welcome to Initial Setup"
  echo "Here we will configure Proxies and Internet if needed"
  echo "***************** Here we go ! ****************"
  read -p "Welcome to initsetup local install (Path or Master Instance)/ internet install / proxy install" init_setup
  case $init_setup in
    ([Pp])
        read -p "Specify [IP Port] : " prx_ip prx_port
        logeverything proxied_server
        echo "Storing and configuring HTTPX Variables"
        echo "HTTP PROXY" >> $logdir/httpx_vars.log
        export http_proxy=$prx_ip:$prx_port >> $logdir/httpx_vars.log
        echo "HTTP PROXY" >> $logdir/httpx_vars.log
        export https_proxy=$prx_ip:$prx_port >> $logdir/httpx_vars.log
        echo "Stored and Configured"
        #cmkdownload
        echo "Proceding to new function - installer - used to be cmkdownload"
        echo "VER ISTO !! sleeping 30 br0"
        sleep 30
        installer
        ;;
    ([Ll])
        echo "Fine, specify local path or Master instance"
        # Needs to ask where is it placed in Master ? in path
        read -p " Will you retrieve Check_MK.rpm from Master Instance or Path (M/P)?" local_source
        case $local_source in
        ([Mm]) cmkdownload_local Master;;
        ([Pp]) cmkdownload_local path;;
        0) exit;;
        esac
        ;;
      ([Ii]) echo "internet install nothing more";;
    ([Qq]) exit;;
  esac
}

function installer {
  clear
  echo "Welcome to CMK Installer"
  echo "Define which Architecture will be used "
  read -p "Distributed or Single node setup? [D/S/Z/M(special menu)/Quit]" install_type
  case $install_type in
    ([Dd]) distributed_setup;;
    ([Ss]) singlenode_setup;;
    ([Mm]) special_menu;;
    ([Qq]) exit;;
  esac
}
function logeverything () {
  clear
  echo "Creating Log dir"
  mkdir -v -p "/tmp/$scriptname/log/$1"
  logdir="/tmp/$scriptname/log/$1"
  echo "$logdir created"
  sleep $snorlax
  #debug
}

function cmkdownload () {
  # Since we have just specified proxies internet access must be tested and Check_MK download must be done - Attention Enterprise Editions Require Authentication
  clear
  echo "Internet access will be tested in order to proceed with Check_MK Download"
  echo "ATTENTION ENTERPRISE EDITIONS REQUIRES LICENCED ACCOUNT"
  status_code=$(curl --write-out %{http_code} --silent --output /dev/null https://checkmk.com)
  if [[ $status_code -ne 200 ]] ; then
    echo "Connection to Check_MK Website failed with code $status_code"
    echo "Exiting to shell in 3 sec"
    sleep 3
    exit
  else
    echo "Internet connection passed with code $status_code"
    echo "Needs to be reviewed point of no return, ABORT !"
    read -p  "Which Check_MK Version to Download [CRE/CEE/CME] [1.(5)/1.(6)] ?" cmk_edition cmk_version
    case $cmk_edition in
      'CRE') cmk_downloader raw;;
      'CEE') cmk_downloader enterprise;;
      'CME') cmk_downloader managed;;
    esac
    # cmk_downloader $cmk_version $cmk_edition
  fi
}
#Used to install from Master Instance or local path 
function cmkdownload_local () {
  echo "local download and install"
  echo $1
  if [[ $1 == 'Master' ]] ; then
    read -p "Master Instance IP ? " master_ip
    echo $master_ip
  else
    read -p "Full Path ? " full_path
    echo $full_path
  fi
}

function cmk_downloader () {
    echo "Downloading Check_MK $cmk_edition AKA $1 || $cmk_version"
    sleep $snorlax
    #https://checkmk.com/support/1.6.0p2/check-mk-raw-1.6.0p2-el7-38.x86_64.rpm
    #https://checkmk.com/support/1.6.0p2/check-mk-enterprise-1.6.0p2-el7-38.x86_64.rpm
    #https://checkmk.com/support/1.6.0p2/check-mk-managed-1.6.0p2-el7-38.x86_64.rpm
}

#function debug {
  #Proxy Debug
  #Lacks debug dir to echo stuff - CREATED NOW POINT STUFF
  #clear
  #echo "DEBUG MODE"
  #echo "DEBUG LOGDIR"
  #echo $logdir
  #mkdir "$logdir/debug/"
  #touch "$logdir/debug/debug.log"
  #log_debug="$logdir/debug/debug.log"
  #echo "Proxy Debug" >> $log_debug
  #echo "START" >> $log_debug
  #echo $http_proxy >> $log_debug
  #echo $https_proxy >> $log_debug
  #env | grep http* >> $log_debug
  #echo "END" >> $log_debug
#}
function os_preparation {
  echo "validating OS"
  os_ver=$(cat /etc/redhat*)
  echo "SELINUX STATE"
  selinux_state=$(sestatus | awk '{print $2 $3}')
  "Should be  - disabled - Next line is setenforce 0 - so if rebooted everything is fucked up"
  echo $selinux_state
  setenforce 0
  echo "firewall should also be disabled"
  systemctl status firewalld
  echo "EPEL RELEASE IS NEEDED"
  echo "VERIFYING"
  yum_epel_search=$(yum repolist | grep epel | wc -l)
  if [[ $yum_epel_search < 2 ]]; then 
    echo "EPEL not installed"
    read -p "Do you want to install ? Y/N" yumepel
    case $yumepel in
      ([Yy]) echo "installing epel";;
      ([Nn]) echo "epel wasn't found";;
    esac
  else 
    echo "EPEL installed proceeding"

  fi
}

#CMK Arch config
function cmk_arch {
  echo "Check MK Arch"
  echo "Distributed setup - Intended to be used when there is a Master instance already installed or a new Master Instance is added \n
        Single Node setup - Used when setting up an isolated Cmk instance"
  read -p "Distributed or Single Node ? (D/S):" arch_setup
  case $arch_setup in
    ([Dd]) echo "Distributed Setup";;
    ([Ss]) echo "Single Setup";;
}

function distributed_setup {
  #TEST Master <---> Slave (6556/6557)
  clear
  echo "Welcome to Distributed Setup Menu"
  echo "Log dir is going to be created (mkdir -v)"
  mkdir -v -p "$logdir/distributed_setup"
  dst_setup_log="$logdir/distributed_setup/"
  logeverything dst_setup
  echo "Log dir created"
  echo "will call another function and try to return, not sure if returned is the right way to do it :/ "
  cmk_downloader

}

function singlenode_setup {
  echo "SINGLE NODE"
  os_preparation
  rpm -ivh check*
}
#Maybe could be sourced, it will have python stuff
function special_menu {
echo "CMK CENAS"
echo "1)install MK Agent (Web/local)"
echo "2)Register Slave instance in Master instance"
echo "3)Register new Master Instance"
echo "0) Exit"
read -p "Option :" optin
case $optin in
  1) echo "will install mk agent";;
  2) echo "Register slave in master";;
  3) echo "register new master";;
  0)exit;;
esac
}

### Main menu 
function begining {
  echo "Dafuck you want to do ? "
  echo "1) Install check_mk"
  echo "2) Special menu (API)"
  echo "0) Exit"
  read -p " Option : " opt_beg
  case $opt_beg in 
    1)initsetup;;
    2)special_menu;;
    0)exit;;
  esac
}
begining
